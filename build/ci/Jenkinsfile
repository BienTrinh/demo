sonarToken = ""
sonarHost = ""
def notifyBuild(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESSFUL'

    // Default values
    def subject_full = "${buildStatus}: Job <${env.BUILD_URL}/console|${env.JOB_NAME} [${env.BUILD_NUMBER}]>"
    def colorName = 'good'
    def slackChannelName = '#demo'
    def project_key = 'com.trustingsocial.trustvision.demo'
    // Override default values based on build status
    switch (buildStatus) {
        case ["STARTED"]:
            summary = subject_full.replaceAll("/console", "")
            break
        case ["SUCCESSFUL"]:
            coverage_rate = sh(script: "curl -s -u $sonarToken: '$sonarHost/api/badges/measure?key=${project_key}&metric=coverage' | sed -e 's/<[^>]*>//g;s/%/ /g' | cut -d ' ' -f2", returnStdout: true).trim()
            summary = subject_full.replaceAll("/console", "") + "\n *demo* - *PASSED* - _Code coverage *<${sonarHost}/dashboard?id=${project_key}|${coverage_rate}>*_ :tada:"
            break
        default:
            colorName = 'danger'
            summary = subject_full
    }

    // Send notifications
    slackSend (channel: slackChannelName, failOnError: true, color: colorName, message: summary)
}

// Set discard job
properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '7', artifactNumToKeepStr: '10', daysToKeepStr: '7', numToKeepStr: '10']]]);

node {
    try {
        def appName = 'demo'
        def composerTag = "$appName${env.BRANCH_NAME}${env.BUILD_NUMBER}"
        def privateRegistry = 'docker-registry.trustingsocial.com'

        if (env.BRANCH_NAME.matches("master|release-.*")) {
            notifyBuild('STARTED')
        }

        stage ('Checkout source code') {
            checkout scm
        }

        stage('Run tests') {
            try {
                repoTag = composerTag.replaceAll("[-_./]", "")
                sh("docker-compose -p  ${repoTag} -f build/docker/docker-compose.yml up --build -d")
                def TEST_EXIT_CODE = sh(script: "docker wait  ${repoTag}_app_1", returnStdout: true).trim()
                sh("docker logs  ${repoTag}_app_1")
                println TEST_EXIT_CODE
                assert TEST_EXIT_CODE == '0'
            } catch (AssertionError e) {
                throw e
            } finally {
                sh("docker-compose -p  ${repoTag} -f build/docker/docker-compose.yml down -v --rmi local")
            }
        }

        stage "SonarQube analysis"
        try {
            switch (env.BRANCH_NAME) {
                case ~/^(release-.*)|master/:
                    def scannerHome = tool 'SonarQube Scanner';
                    withSonarQubeEnv {
                        sh "${scannerHome}/bin/sonar-scanner"
                        sonarToken = "${SONAR_AUTH_TOKEN}"
                        sonarHost = "${SONAR_HOST_URL}"
                    }
                    break
                default:
                    echo "no environment defined"
            }
        } catch (e) {
            currentBuild.result = "FAILED"
            throw e
        } finally {
            sh("rm -rf ./coverage.xml ./cover.out")
        }

    } catch (AssertionError e) {
        // If there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw e
    } catch (e) {
        currentBuild.result = "FAILED"
        throw e
    } finally {
        // Success or failure, always send notifications
        if (env.BRANCH_NAME.matches("master|release-.*")) {
            notifyBuild(currentBuild.result)
        }
    }
}
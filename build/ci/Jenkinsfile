sonarToken = ""
sonarHost  = ""

def notifyBuild(String buildStatus = 'STARTED'){
    buildStatus = buildStatus ?: 'SUCCESSFUL'

    //Default values
    def subject_full = "${buildStatus}: Job <${env.BUILD_URL}/console|${env.JOB_NAME} [${env.BUILD_NUMBER}]>"
    def colorName = 'good'
    def slackChannelName = '#demo-notics'
    def project_key = 'com.trustingsocial.BienTrinh.demo'

    // Override default values based on build status

    switch (buildStatus){
        case ['STARTED']:
            summary = subject_full.replaceAll("/console", "").replaceAll("%2F", "/")
            break
        case ['SUCCESSFUL']:
            coverage_rate = sh(script: "curl -s -u $sonarToken: '$sonarHost/api/badges/measure?key=${project_key}&metric=coverage' | sed -e 's/<[^>]*>//g;s/%/ /g' | cut -d ' ' -f2", returnStdout: true).trim()
            summary = subject_full.replaceAll("/console", "") + "\n *DEMO* - *PASSED* - _Code coverage *<${sonarHost}/dashboard?id=${project_key}|${coverage_rate}>*_ :tada:"
            break
        default:
            colorName = 'danger'
            summary = subject_full
    }

    // Send notifications
    slackSend (channel: slackChannelName, failOnError: true, color: colorName, message: summary)
}
node {
    try {
        def appName = 'demo'
        def composerTag = "$appName${env.BRANCH_NAME}${env.BUILD_NUMBER}"
        def privateRegistry = 'docker-registry.trustingsocial.com'

        if (env.BRANCH_NAME.matches("master|release-.*")) {
            notifyBuild('STARTED')
        }

        // checkout source code
        stage('Checkout source code') {
            checkout scm
        }

        // Run testing
        stage('Run tests') {
            try {
                repoTag = composerTag.replaceAll("[-_./]", "")
                sh("docker-compose -p  ${repoTag} -f build/docker/docker-compose.yml up --build -d")
                def TEST_EXIT_CODE = sh(script: "docker wait  ${repoTag}_app_1", returnStdout: true).trim()
                sh("docker logs  ${repoTag}_app_1")
                println TEST_EXIT_CODE
                if (TEST_EXIT_CODE == 1) {
                    currentBuild.result = "FAILED"
                }
            } catch (AssertionError e) {
                currentBuild.result = "FAILED"
                throw e
            } finally {
                sh("docker-compose -p  ${repoTag} -f build/docker/docker-compose.yml down -v --rmi local")
            }
        }

    }
    catch (AssertionError e){
        currentBuild.result = "FAILED"
        throw e
    }
    finally {
        if (env.BRANCH_NAME.matches("master|release-.*")) {
            notifyBuild(currentBuild.result)
        }
    }
}